{{- if .Values.postInstall.createVectorExtension }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "pgvector.fullname" . }}-create-vector-extension
  labels:
    {{- include "pgvector.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 1
  template:
    metadata:
      labels:
        {{- include "pgvector.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ .name | default . }}
        {{- end }}
      {{- end }}
      restartPolicy: OnFailure
      containers:
        - name: create-vector-extension
          image: postgres:16
          imagePullPolicy: IfNotPresent
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "pgvector.secretName" . }}
                  key: {{ .Values.secrets.passwordKey }}
            - name: PGUSER
              value: {{ default "postgres" .Values.env.POSTGRES_USER | quote }}
            - name: PGDATABASE
              value: {{ default "postgres" .Values.env.POSTGRES_DB | quote }}
          command: ["sh", "-c"]
          args:
            - >-
              psql -v ON_ERROR_STOP=1 \
                -h {{ include "pgvector.fullname" . }} \
                -p {{ .Values.service.port }} \
                -U "$PGUSER" \
                -d "$PGDATABASE" \
                -c "CREATE EXTENSION IF NOT EXISTS vector;"
{{- end }} 